import streamlit as st
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
import os
from secret_key import openapi_key
import pandas as pd
from langchain.chat_models import ChatOpenAI
from langchain.schema import (AIMessage,HumanMessage,SystemMessage)
from langchain.prompts.chat import (
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate
)
from langchain.memory import ConversationBufferMemory
from langchain.memory import ConversationBufferWindowMemory

st.title("Interview Prep AI")


key = st.sidebar.text_input("OpenAI API Key ", type="password")
category = st.selectbox("Which type of questions do you want to attempt",
                    ['General', 'Technical', 'Behavioural', 'Culture Fit'])

while category is None:
    st.markdown('Please select question category')

st.markdown(category)

if not key:
    st.info("Please add your API key to continue")
    st.stop()

os.environ['OPENAI_API_KEY'] = key

chat = ChatOpenAI(temperature=0.6)

system_template = """Speak in the style of {role} 
Use this history : {history} of chat if needed, where the content of user is human messages and the assistant content 
is previous messages generated by you.
                  """


system_message_prompt = SystemMessagePromptTemplate.from_template(system_template)

human_template = "{text}"
human_message_prompt = HumanMessagePromptTemplate.from_template(human_template)

chat_prompt = ChatPromptTemplate.from_messages([system_message_prompt,human_message_prompt])

chain = LLMChain(llm=chat, prompt=chat_prompt)

if "message" not in st.session_state:
    st.session_state.message = []

for message in st.session_state.message:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])


if inp := st.chat_input("Type here"):
    with st.chat_message("user"):
        st.markdown(inp)

    st.session_state['message'].append({'role': 'user', 'content': inp})

response = chain.run(role='Levi from Attack on Titan', history=st.session_state['message'][-3:], text=inp)

with st.chat_message("assistant"):
    st.markdown(response)
st.session_state['message'].append({'role': 'assistant', 'content': response})

